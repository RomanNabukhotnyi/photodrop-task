service: photodrop-photographer
frameworkVersion: "3"
plugins:
  - serverless-esbuild
  - serverless-offline
useDotenv: true
provider:
  name: aws
  runtime: nodejs16.x
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    PHOTOGRAPHERS_TABLE_NAME: ${self:custom.photographersTableName}
    ALBUMS_TABLE_NAME: ${self:custom.albumsTableName}
    PHOTOS_TABLE_NAME: ${self:custom.photosTableName}
    PHOTOGRAPHER_CLIENTS_TABLE_NAME: ${self:custom.photographerClientsTableName}
    CLIENT_PHOTOS_TABLE_NAME: ${self:custom.clientPhotosTableName}
    CLIENTS_TABLE_NAME: ${self:custom.clientsTableName}
    BUCKET_NAME: ${self:custom.bucketName}
    ACCES_SECRET: ${env:ACCES_SECRET}
    REFRESH_SECRET: ${env:REFRESH_SECRET}
    TOKEN: ${env:TOKEN}
    CHAT_ID: ${env:CHAT_ID}
    WATERMARK_KEY: ${env:WATERMARK_KEY}
    ACCESS_KEY_ID: ${env:ACCESS_KEY_ID}
    SECRET_ACCESS_KEY: ${env:SECRET_ACCESS_KEY}
    PHOTODROP_CLIENT_URL: ${env:PHOTODROP_CLIENT_URL}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
        - dynamodb:*
      Resource: "*"

functions:
    verifyToken:
      handler: src/functions/verifyToken/handler.main

    signup:
      handler: src/functions/signup/handler.main
      events:
        - http:
            path: /signup
            method: post
            cors: true
    
    login:
      handler: src/functions/login/handler.main
      events:
        - http:
            path: /login
            method: post
            cors: true

    createAlbum:
      handler: src/functions/createAlbum/handler.main
      events:
        - http:
            path: /albums
            method: post
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    getPresignedUrl:
      handler: src/functions/getPresignedUrl/handler.main
      events:
        - http:
            path: /getPresignedUrl/{albumId}
            method: post
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    getListAlbums:
      handler: src/functions/getListAlbums/handler.main
      events:
        - http:
            path: /albums
            method: get
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    searchClient:
      handler: src/functions/searchClient/handler.main
      events:
        - http:
            path: /searchClient
            method: get
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    getAlbum:
      handler: src/functions/getAlbum/handler.main
      events:
        - http:
            path: /albums/{albumId}
            method: get
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    deleteAlbum:
      handler: src/functions/deleteAlbum/handler.main
      events:
        - http:
            path: /albums/{albumId}
            method: delete
            cors: true

    updateDb:
      handler: src/functions/updateDb/handler.main
      memorySize: 3008
      timeout: 300
      events:
        - s3:
            bucket: ${self:custom.bucketName}
            event: s3:ObjectCreated:Put
            rules:
              - prefix: original/
            existing: true

package:
  individually: true

custom:
  photographersTableName: photodrop-photographers
  albumsTableName: photodrop-albums
  photosTableName: photodrop-photos
  photographerClientsTableName: photodrop-photographer-clients
  clientPhotosTableName: photodrop-client-photos
  clientsTableName: photodrop-clients
  bucketName: photodrop-bucket
  esbuild:
    external: ["sharp"]
    packagerOptions:
      scripts: ["npm rebuild --arch=x64 --platform=linux sharp"]

resources:
  Resources:
    PhotographersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.photographersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    AlbumsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.albumsTableName}
        AttributeDefinitions:
          - AttributeName: photographerId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: photographerId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: IdIndex
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    PhotographerClientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.photographerClientsTableName}
        AttributeDefinitions:
          - AttributeName: photographerId
            AttributeType: S
          - AttributeName: clientId
            AttributeType: S
        KeySchema:
          - AttributeName: photographerId
            KeyType: HASH
          - AttributeName: clientId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    ClientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.clientsTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: number
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: NumberIndex
            KeySchema:
              - AttributeName: number
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    PhotosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.photosTableName}
        AttributeDefinitions:
          - AttributeName: albumId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: albumId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: IdIndex
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    ClientPhotosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.clientPhotosTableName}
        AttributeDefinitions:
          - AttributeName: clientId
            AttributeType: S
          - AttributeName: photoId
            AttributeType: S
          - AttributeName: albumId
            AttributeType: S
        KeySchema:
          - AttributeName: clientId
            KeyType: HASH
          - AttributeName: photoId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: AlbumIdIndex
            KeySchema:
              - AttributeName: albumId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: PublicReadWrite