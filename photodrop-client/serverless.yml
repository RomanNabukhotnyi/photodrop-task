service: photodrop-client
frameworkVersion: "3"
plugins:
  - serverless-webpack
  - serverless-offline
useDotenv: true
provider:
  name: aws
  runtime: nodejs14.x
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NODE_OPTIONS: --enable-source-maps --stack-trace-limit=1000
    CLIENTS_TABLE_NAME: ${self:custom.clientsTableName}
    OTPS_TABLE_NAME: ${self:custom.otpsTableName}
    CLIENT_PHOTOS_TABLE_NAME: ${self:custom.clientPhotosTableName}
    BUCKET_NAME: ${self:custom.bucketName}
    PHOTOGRAPHER_BUCKET_NAME: ${self:custom.photographerBucketName}
    PHOTOGRAPHER_CLIENTS_TABLE_NAME: ${self:custom.photographerClientsTableName}
    SECRET: ${env:SECRET}
    TOKEN: ${env:TOKEN}
    CHAT_ID: ${env:CHAT_ID}
    WATERMARK_URL: ${env:WATERMARK_URL}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
        - dynamodb:*
        - s3-object-lambda:*
      Resource: "*"

functions:
    verifyToken:
      handler: src/functions/verifyToken/handler.main

    sendOtp:
      handler: src/functions/sendOtp/handler.main
      events:
        - http:
            path: /sendOtp
            method: post
            cors: true
    
    verifyOtp:
      handler: src/functions/verifyOtp/handler.main
      events:
        - http:
            path: /verifyOtp
            method: post
            cors: true

    getPresignedUrl:
      handler: src/functions/getPresignedUrl/handler.main
      events:
        - http:
            path: /getPresignedUrl
            method: get
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    updateClient:
      handler: src/functions/updateClient/handler.main
      events:
        - http:
            path: /client
            method: put
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    getClient:
      handler: src/functions/getClient/handler.main
      events:
        - http:
            path: /client
            method: get
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    getListAlbums:
      handler: src/functions/getListAlbums/handler.main
      events:
        - http:
            path: /albums
            method: get
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    removeWatermark:
      handler: src/functions/removeWatermark/handler.main
      events:
        - http:
            path: /removeWatermark/{photoKey}
            method: delete
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    getAlbum:
      handler: src/functions/getAlbum/handler.main
      events:
        - http:
            path: /albums/{albumName}
            method: get
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    updateDb:
      handler: src/functions/updateDb/handler.main
      events:
        - s3:
            bucket: ${self:custom.bucketName}
            event: s3:ObjectCreated:Put
            existing: true

    addWatermark:
      handler: src/functions/addWatermark/handler.main

# package:
#   individually: true

custom:
  clientsTableName: clients-table
  otpsTableName: otps-table
  clientPhotosTableName: client-photos-table
  bucketName: photodrop-client-bucket
  photographerBucketName: photodrop-photos-bucket
  photographerClientsTableName: photographer-clients-table
  webpack:
    webpackConfig: webpack.config.ts
    includeModules: true
    packager: npm

resources:
  Resources:
    ClientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.clientsTableName}
        AttributeDefinitions:
          - AttributeName: number
            AttributeType: S
        KeySchema:
          - AttributeName: number
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    OtpsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.otpsTableName}
        AttributeDefinitions:
          - AttributeName: number
            AttributeType: S
        KeySchema:
          - AttributeName: number
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiryAt
          Enabled: true

    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: PublicRead

    bucketAccessPoint:
      Type: AWS::S3::AccessPoint
      Properties:
        Bucket: ${self:custom.photographerBucketName}
        Name: bucket-access-point-image-watermark

    lambdaAccessPoint:
      Type: AWS::S3ObjectLambda::AccessPoint
      Properties:
        Name: lambda-access-point-image-watermark
        ObjectLambdaConfiguration:
          SupportingAccessPoint: !Sub arn:aws:s3:${AWS::Region}:${AWS::AccountId}:accesspoint/${bucketAccessPoint}
          TransformationConfigurations:
            - Actions:
                - "GetObject"
              ContentTransformation:
                AwsLambda:
                  FunctionArn: !GetAtt AddWatermarkLambdaFunction.Arn
    