service: photodrop-client
frameworkVersion: "3"
plugins:
  - serverless-esbuild
useDotenv: true
provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs16.x
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    PHOTOGRAPHERS_TABLE_NAME: photodrop-photographers-${self:provider.stage}
    ALBUMS_TABLE_NAME: photodrop-albums-${self:provider.stage}
    PHOTOS_TABLE_NAME: photodrop-photos-${self:provider.stage}
    PHOTOGRAPHER_CLIENTS_TABLE_NAME: photodrop-photographer-clients-${self:provider.stage}
    CLIENT_PHOTOS_TABLE_NAME: photodrop-client-photos-${self:provider.stage}
    CLIENTS_TABLE_NAME: photodrop-clients-${self:provider.stage}
    OTPS_TABLE_NAME: !Ref OtpsTable
    BUCKET_NAME: photodrop-photos-bucket-${self:provider.stage}
    SECRET: ${env:SECRET}
    TOKEN: ${env:TOKEN}
    CHAT_ID: ${env:CHAT_ID}
    WATERMARK_URL: ${env:WATERMARK_URL}
    STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY}
    STRIPE_WEBHOOK_SECRET: ${env:STRIPE_WEBHOOK_SECRET}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
        - dynamodb:*
      Resource: "*"

functions:
    verifyToken:
      handler: src/functions/verifyToken/handler.main

    sendOtp:
      handler: src/functions/sendOtp/handler.main
      events:
        - http:
            path: /sendOtp
            method: post
            cors: true
    
    verifyOtp:
      handler: src/functions/verifyOtp/handler.main
      events:
        - http:
            path: /verifyOtp
            method: post
            cors: true

    getPresignedUrl:
      handler: src/functions/getPresignedUrl/handler.main
      events:
        - http:
            path: /getPresignedUrl
            method: post
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    updateClient:
      handler: src/functions/updateClient/handler.main
      events:
        - http:
            path: /client
            method: put
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    getClient:
      handler: src/functions/getClient/handler.main
      events:
        - http:
            path: /client
            method: get
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    getListAlbums:
      handler: src/functions/getListAlbums/handler.main
      events:
        - http:
            path: /albums
            method: get
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    removeWatermark:
      handler: src/functions/removeWatermark/handler.main
      events:
        - http:
            path: /removeWatermark
            method: post
            cors: true

    getAlbum:
      handler: src/functions/getAlbum/handler.main
      events:
        - http:
            path: /albums/{albumId}
            method: get
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    createCheckoutSession:
      handler: src/functions/createCheckoutSession/handler.main
      events:
        - http:
            path: /createCheckoutSession/{albumId}
            method: post
            cors: true
            authorizer:
              name: verifyToken
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0

    updateDb:
      handler: src/functions/updateDb/handler.main
      events:
        - s3:
            bucket: ${self:provider.environment.BUCKET_NAME}
            event: s3:ObjectCreated:Put
            rules:
              - prefix: selfie/
            existing: true

package:
  individually: true

custom:
  esbuild:
    external: ["sharp"]
    packagerOptions:
      scripts: ["npm rebuild --arch=x64 --platform=linux sharp"]

resources:
  Resources:
    OtpsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: photodrop-otps-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: number
            AttributeType: S
        KeySchema:
          - AttributeName: number
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiryAt
          Enabled: true
    